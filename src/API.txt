[CLI]
canvas index /home/foo/bar.txt
canvas index /home/foo/bar.txt --context work/foo
context index /home/foo/bar.txt
canvas put /home/foo/bar.txt --backend s3 --backend smb:/pub/tmp --remove-source --context /home/cleanup
canvas list --feature 'data/abstr/tab' --feature 'data/abstr/note' --context '/work'
canvas get id:12345
canvas get hash:sha1-1234
context todo add groceries today --deadline today
canvas todo add groceries today --deadline today --context /home
canvas note add this is a note --title "test note" --context /home/notes
context note add another one --title "test"
canvas list *.mp3
canvas run terminal
canvas find ..
canvas query ..


insertNote
  s = getSchema(note)
  s.title =
  s.body =
  insertDocument(s, ctxArr, ftArr)
insertTodo
insertTab
insertEvent
insertFile

local:db

canvas.insertDocument()
canvas.listDocuments(contextArray, featureArray, filterArray)
context.listDocuments(featureArray, filterArray)

canvas.insertDocument(doc, contextArray, featureArray)
context.insertDocument(featureArray)

canvas.data.backends
  file
  s3
  lmdb

canvas.index

data
  .cache
  .backends
    local
      file
      fs
      lmdb

    DeviceID
      fs

    home
      s3
      aws


location:driver/path
canvas://office:s3/
canvas://nas:s3/
canvas://nas:smb/foo/bar/baz/baf.txt
canvas://local:file/notes/


canvas.data .getDocument()

canvas://local:lmdb/data/abstr/tab/sha1-1234

canvas://local:file/opt/foo/bar/baz.txt
canvas://local:fs/
canvas://1234-1234-1245:file/home/foo/bar/baz

~/.canvas
  /config
    /data.json
    /client.json
    /client.transports.json
    /server.json
    /server.transports.json
  /index
    /db
    /tree.json
    /layers.json
    /devices.json
  /data
    /cache
    /backends
      /file
      /lmdb
      /s3


[REST].v2
basePath: /rest/v2

Paths:
  /index:
    GET: Retrieve index information
    /bitmaps:
      GET: List all bitmaps
      POST: Create a new bitmap
      /{bitmapId}:
        GET: Retrieve a specific bitmap
        PUT: Update a specific bitmap
        DELETE: Delete a specific bitmap

  /data:
    /schemas:
      GET: Retrieve all schemas
      POST: Create a new schema
    /backends:
      GET: List all backends
      POST: Create a new backend
      /{backendId}:
        GET: Retrieve a specific backend
        PUT: Update a specific backend
        DELETE: Delete a specific backend
    /a:
      /notes:
        GET: Retrieve notes (query param: metaOnly)
      /emails:
        GET: Retrieve emails (query param: metaOnly)

  /contexts:
    /{contextId}:
      /data:
        /a:
          /emails:
            GET: Retrieve emails for a specific context
      /tree:
        GET: Retrieve tree for a specific context
      /url:
        GET: Retrieve URL for a specific context
      /path:
        /copy:
          POST: Copy a path within the context
        /move:
          POST: Move a path within the context

  /sessions:
    /{sessionId}:
      GET: Retrieve session information
      PUT: Update session information
      DELETE: End a session

  /tree:
    GET: Retrieve global tree
    /layers:
      GET: List all layers
      POST: Create a new layer
      /{layerId}:
        GET: Retrieve a specific layer
        PUT: Update a specific layer
        DELETE: Delete a specific layer
    /paths:
      GET: List all paths
      POST: Create a new path
      /{*path}:
        GET: Retrieve a specific path
        PUT: Update a specific path
        DELETE: Delete a specific path
    /operations:
      /copy:
        POST: Copy a path (with recursive option)
      /move:
        POST: Move a path (with recursive option)
      /remove:
        POST: Remove a path (with recursive option)


  /stats:
    GET: Retrieve API statistics


POST /rest/v2/tree/operations/copy
Content-Type: application/json

{
  "sourcePath": "/operations/foo/bar",
  "destinationPath": "/new/path/for/operations/foo/bar",
  "recursive": true
}


canvas
    [service]
    - start
        - init services
            - db
            -
        - init managers
            - context
            - session
        - init transports
    - stop
    - restart
    - status

    # Main Canvas class(main.js) configures global modules
    # - config
    # - logger
    # - db
    # All 3 passed to other modules in a DI pattern


    sessions
    workspaces
    contexts


    [apps]

    [roles]

    [compute]
    - addComputeBackend
    -

    [data]
    - addDataSource
    - listDataSources
    - removeDataSource







/*

index
    .list()
    .has()
    .get()
    .insert()
    .remove()
    .delete()
    .size()
    .create(backend)
    .destroy()
    .db


index.tree
index.layers

index.sessions

index.devices
index.apps
index.roles
index.identities

? index.users


db.documents

---
bitmaps
    context
        global
        user
    features
        data/
        app/
        custom/
    filters
        date
        time
        name

hashmaps
    sha1
        hash | id
    sha256
        hash | id
    xxhash
        hash | id

vectors
    id | vector
metadata
    id | meta

    SynapseDB

Bitmap indexes
 - Context
    - Global/System
        - DeviceID (uuid12 of the current device)
        - Network (172.16.2.0/24)
        - Current os.user
    - User
        - Global context tree

 - Features
    - builtin (set intrinsically/gathered by the ftExtract() function)
        - data/abstraction/{tab,note,file,email..}
        - mime/type/application-json
    - builtin/nested
        - data/abstraction/email/from/contactID
        - data/abstraction/file/ext/json
    - custom
        - custom/tag/<tag>
        - custom/app/<appid>
    - custom/nested
        - custom/user/userid
        - custom/device/deviceid

 - Filters
    - date/20240101
    -


canvas.paths() // Return the current canvas paths for user and server
canvas.paths('user') // Return the current canvas paths for user
canvas.paths('server') // Return the current canvas paths for server
canvas.version() // Return the current canvas version
...

// Controlls
canvas.start()
canvas.stop()
canvas.restart()
canvas.status()

// Events
canvas.on('running', () => {})
canvas.on('error', (err) => {})
...

// Ordered by priority
canvas.services.list()
canvas.roles.list()
canvas.apps.list()

canvas.devices.list()
canvas.devices.get(id) // if null, returns the current device

canvas.users.list()
canvas.users.get(id) // if null, returns the current user

canvas.sessions.list()
canvas.sessions.get(id)
canvas.sessions.create()


canvas.contexts.list()



canvas.contexts.list()
canvas.contexts.get(id) // returns a context object

canvas.context(id).apps.list()
canvas.context(id).roles.list()





canvas.store.backends.list()


canvas.getDocument(id, format = 'json')
canvas.putDocument(id, data, backends)

canvas.context.

canvas.index.get()
canvas.index.has()

canvas.store.getDocument(id, format = 'json')
canvas.store.putDocument(id, data)
canvas.store.has(hash)
canvas.store.put(hash, data, backends)


*/




class NoFreakingIdeaInterface {

    constructor() { }


    getDocument(id, format = 'json') { }




}
